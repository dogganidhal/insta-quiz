scalar GraphQLDateTime

enum QuestionType {
  SINGLE_CHOICE
  MULTI_CHOICE
  INPUT
}

enum QuizType {
  MCQ
  MIXED
}

type User {
  id: ID!
  fullName: String
  email: String!
  submissions: [Submission]
}

type Quiz {
  id: ID!
  title: String!
  description: String
  type: QuizType!
  authorId: ID!
  author: User!
  deadline: GraphQLDateTime
  questions: [Question]!
  submissions: [Submission]
}

type Question {
  id: ID!
  content: String!
  quizId: ID!
  quiz: Quiz!
  type: QuestionType!
  suggestions: [Suggestion]!
  answers: [Answer]!
}

type Suggestion {
  id: ID!
  questionId: ID!
  question: Question!
  content: String
  imageUrl: String
  isCorrect: Boolean!
}

type Score {
  points: Int!
  totalPoints: Int!
}

type QuizResponse {
  questionId: ID!
  question: Question!
  answers: [Answer!]!
}

type Submission {
  id: ID!
  userId: ID!
  user: User!
  quizId: ID!
  quiz: Quiz!
  responses: [QuizResponse]!
  score: Score!
}

type Answer {
  id: ID!
  content: String
  submissionId: ID!
  submission: Submission!
  suggestionId: ID!
  suggestion: Suggestion!
  questionId: ID!
  question: Question!
  userId: ID!
  user: User!
}

type AuthCredentials {
  accessToken: String!
}

type Query {
  me: User
  login(token: String!): AuthCredentials!
  quiz(id: ID): [Quiz]!
  submission(id: ID): [Submission]!
}

type Mutation {
  createQuiz(quizData: InsertQuizInput): Quiz
  submit(submissionData: InsertSubmissionInput): Submission
}

input InsertQuizInput {
  title: String!
  description: String
  deadline: GraphQLDateTime
  questions: [InsertQuestionInput]!
}

input InsertQuestionInput {
  content: String!
  type: QuestionType!
  points: Int
  suggestions: [InsertSuggestionInput]
}

input InsertSubmissionInput {
  quizId: ID!
  answers: [InsertAnswerInput]!
}

input InsertAnswerInput {
  content: String
  suggestionId: ID
  questionId: ID!
}

input InsertSuggestionInput {
  content: String
  imageUrl: String
  isCorrect: Boolean!
}